import React, { useState } from "react";
import styled from "styled-components";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";


const Container = styled.div`
  display: inline-block;

  border: ${props => `2px solid ${props.outlineColor || props.theme.colors.grey}`};
  border-radius: ${props => props.theme.defaults.borderRadius};

  color: ${props => props.disabled ? props.theme.colors.grey : (props.outlineColor || props.theme.colors.black)};
  transition: border 250ms ease-in-out;

  &:hover, &.focused {
    outline: none;
    border: ${props => `2px solid ${props.disabled ? props.theme.colors.grey : (props.outlineColor || props.theme.colors.black)}`};
  }
`;


const Box = styled.div`
  cursor: ${props => props.disabled ? 'normal' : 'pointer'};

  display: flex;
  flex-direction: row;
  justify-content: space-between;

  padding: 1vw;

  border-bottom: ${props => props.open ? `2px solid ${props.theme.colors.grey}` : 'none'};
  border-radius: ${props => props.theme.defaults.borderRadius};


  & span {
    margin-right: 1em;
  }
`;


const OptionsList = styled.ul`
  max-height: ${props => props.show ? '20em' : '0'};
  padding: ${props => props.show ? '1vw' : '0'};
  list-style-type: none;
  transition: max-height 300ms ease-in-out;
`;


const Option = styled.li`
  max-height: ${props => props.show ? '2em' : '0'};
  opacity: ${props => props.show ? 1 : 0};
  transition: all 200ms ease-in-out;

  cursor: pointer;
  color: ${props => props.theme.colors.lightBlack};

  &:hover, &.focused {
    outline: none;
    color: ${props => props.outlineColor || props.theme.colors.black};
  }
`;


const SelectDropdown = ({
  className,
  placeholder = 'Select an option',
  optionsArray,
  disabled,
  allowMultiple,
  outlineColor
}) => {

  const [dropdownOpen, toggleDropdownOpen] = useState(false);
  const [allSelectedOptions, updatedSelectedOptions] = useState(new Set());
  const addOption = (prevSelectedOptions, option) => {
    console.log(prevSelectedOptions, option)
    if(disabled) return prevSelectedOptions;

    const newOptions = new Set(prevSelectedOptions); // previous state should be immutable;
    if(allowMultiple) {
      newOptions.add(option);
    } else {
      newOptions.clear();
      newOptions.add(option);
    }

    return newOptions;
  }

  let selectedOption = placeholder; // use placeholder if none are selected
  let valueIsSelected = false;
  if (allSelectedOptions.size === 1) {
    selectedOption = allSelectedOptions.values().next().value.label;
    valueIsSelected = true;
  } else if(allSelectedOptions.size > 1 && allowMultiple) {
    selectedOption = `${allSelectedOptions.size} options selected`
    valueIsSelected = true;
  }

  return (
    <Container
      className={dropdownOpen || valueIsSelected ? 'focused' : ''}
      outlineColor={outlineColor}
      disabled={disabled}
      onClick={disabled ? () => {} : () => toggleDropdownOpen(prevOpen => !prevOpen)}
    >
      <Box open={dropdownOpen}>
        <span>
          {selectedOption}
        </span>
        <FontAwesomeIcon icon={dropdownOpen ? 'chevron-up' : 'chevron-down'} />
      </Box>
      <OptionsList show={dropdownOpen}>
        {optionsArray.map((option, i) => (
          <Option
            show={dropdownOpen}
            id={option.value}
            selected={allSelectedOptions.has(option.value)}
            onClick={() => updatedSelectedOptions(prevOptions => addOption(prevOptions, option))}
          >
            {option.label}
          </Option>
        ))}
      </OptionsList>

    </Container>
  );
}


export default SelectDropdown;
